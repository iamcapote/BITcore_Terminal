/**
 * Why: Retain the most recent CLI research artefact so auxiliary commands (e.g., /export, /storage)
 *      can operate without rerunning investigations.
 * What: Stores an immutable snapshot of the latest research markdown, filename, summary, and query
 *       generated by the CLI execution path.
 * How: Exposes setters/getters that freeze payloads, allowing callers to clear or retrieve the
 *       cached result without mutating shared state.
 */

import { createModuleLogger } from '../../utils/logger.mjs';
import { loadSessionState, saveSessionState } from '../../infrastructure/session/session.store.mjs';

const moduleLogger = createModuleLogger('commands.research.state');

let latestCliResult = null;

try {
  const storedState = await loadSessionState();
  if (storedState.currentResearchResult) {
    latestCliResult = Object.freeze({
      content: storedState.currentResearchResult,
      filename: storedState.currentResearchFilename ?? null,
      summary: storedState.currentResearchSummary ?? null,
      query: storedState.currentResearchQuery ?? null,
      generatedAt: storedState.updatedAt ?? new Date().toISOString()
    });
  }
} catch (error) {
  moduleLogger.warn('Failed to load persisted CLI research result.', {
    message: error?.message || String(error),
  });
}

function persistCliSnapshot(snapshot) {
  saveSessionState({
    currentResearchResult: snapshot?.content ?? null,
    currentResearchFilename: snapshot?.filename ?? null,
    currentResearchSummary: snapshot?.summary ?? null,
    currentResearchQuery: snapshot?.query ?? null,
    updatedAt: snapshot?.generatedAt ?? new Date().toISOString(),
  }).catch((error) => {
    moduleLogger.error('Failed to persist CLI research snapshot.', {
      message: error?.message || String(error),
    });
  });
}

/**
 * Persist the latest CLI research result.
 * @param {Object|null} payload
 * @param {string} payload.content - Markdown content produced by the research engine.
 * @param {string} [payload.filename] - Suggested filename from the research engine.
 * @param {string} [payload.summary] - Summary text returned by the research engine.
 * @param {string} [payload.query] - Source query for the research run.
 * @param {string} [payload.generatedAt] - ISO timestamp for when the result was produced.
 * @returns {Object|null} Frozen snapshot stored as the new latest result.
 */
export function setCliResearchResult(payload) {
  if (!payload || typeof payload.content !== 'string' || !payload.content.trim()) {
    latestCliResult = null;
    persistCliSnapshot(null);
    return latestCliResult;
  }

  const snapshot = Object.freeze({
    content: payload.content,
    filename: payload.filename ?? null,
    summary: payload.summary ?? null,
    query: payload.query ?? null,
    generatedAt: payload.generatedAt ?? new Date().toISOString()
  });

  latestCliResult = snapshot;
  persistCliSnapshot(snapshot);
  return latestCliResult;
}

/**
 * Retrieve the most recent CLI research result snapshot.
 * @returns {Object|null} Frozen snapshot or null when nothing is cached.
 */
export function getCliResearchResult() {
  return latestCliResult;
}

/**
 * Clear the cached CLI research result.
 */
export function clearCliResearchResult() {
  latestCliResult = null;
  persistCliSnapshot(null);
}
